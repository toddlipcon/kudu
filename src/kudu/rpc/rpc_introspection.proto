// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// Protobuf used for introspection of RPC services (eg listing in-flight RPCs,
// reflection, etc)

package kudu.rpc;

option java_package = "org.kududb";

import "kudu/rpc/rpc_header.proto";

message RpcCallInProgressPB {
  required RequestHeader header = 1;
  optional string trace_buffer = 2;
  optional uint64 micros_elapsed = 3;
}

message RpcConnectionPB {
  enum StateType {
    UNKNOWN = 999;
    NEGOTIATING = 0;  // Connection is still being negotiated.
    OPEN = 1;         // Connection is active.
  };

  required string remote_ip = 1;
  required StateType state = 2;
  // TODO: swap out for separate fields
  optional string remote_user_credentials = 3;
  repeated RpcCallInProgressPB calls_in_flight = 4;
}

message DumpRunningRpcsRequestPB {
  optional bool include_traces = 1 [ default = false ];
}

message DumpRunningRpcsResponsePB {
  repeated RpcConnectionPB inbound_connections = 1;
  repeated RpcConnectionPB outbound_connections = 2;
}

//------------------------------------------------------------

message RpczSamplePB {
  optional RequestHeader header = 1;
  optional string trace = 2;
  optional int32 duration_ms = 3;
}

message RpczMethodPB {
  // TODO add method info here!
  repeated RpczSamplePB samples = 1;
}

message DumpRpczStoreRequestPB {
}
message DumpRpczStoreResponsePB {
  repeated RpczMethodPB methods = 1;
}