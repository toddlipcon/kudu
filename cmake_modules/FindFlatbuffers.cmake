# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#=============================================================================
# This file is heavily modified/rewritten from FindFlatbuffers.cmake from the
# CMake project:
#
#   Copyright 2011 Kirill A. Korinskiy <catap@catap.ru>
#   Copyright 2009 Kitware, Inc.
#   Copyright 2009 Philip Lowman <philip@yhbt.com>
#   Copyright 2008 Esben Mose Hansen, Ange Optimization ApS
#
#   Distributed under the OSI-approved BSD License (the "License"):
#
#   CMake - Cross Platform Makefile Generator
#   Copyright 2000-2015 Kitware, Inc.
#   Copyright 2000-2011 Insight Software Consortium
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#   * Neither the names of Kitware, Inc., the Insight Software Consortium,
#     nor the names of their contributors may be used to endorse or promote
#     products derived from this software without specific prior written
#     permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#=============================================================================

#########
# Local rewrite of the flatbuffers support in cmake.
#
# Supports cross-module flatbuffers dependencies and flatbufferss inside
# packages much better than the one built into cmake.
#########
#
# Locate and configure the Google Flat Buffers library.
# Defines the following variables:
#
#   FLATBUFFERS_INCLUDE_DIR - the include directory for flatcol buffers
#   FLATBUFFERS_SHARED_LIBRARY - path to flatbuffers's shared library
#   FLATBUFFERS_STATIC_LIBRARY - path to flatbuffers's static library
#   FLATBUFFERS_FLATC_SHARED_LIBRARY - path to flatc's shared library
#   FLATBUFFERS_FLATC_STATIC_LIBRARY - path to flatc's static library
#   FLATBUFFERS_FLATC_EXECUTABLE - the flatc compiler
#   FLATBUFFERS_FOUND - whether the Flat Buffers library has been found
#
#  ====================================================================
#  Example:
#
#   find_package(Flatbuffers REQUIRED)
#   include_directories(${FLATBUFFERS_INCLUDE_DIR})
#
#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
#   FLATBUFFERS_GENERATE_CPP(FBS_HDRS FBS_TGTS
#     [SOURCE_ROOT <root from which source is found>]
#     [BINARY_ROOT <root into which binaries are built>]
#     FBS_FILES foo.proto)
#   add_executable(bar bar.cc ${FBS_HDRS})
#   target_link_libraries(bar ${FLATBUFFERS_SHARED_LIBRARY})
#
# NOTE: You may need to link against pthreads, depending
# on the platform.
#  ====================================================================
#
# FLATBUFFERS_GENERATE_CPP (public function)
#   HDRS = Variable to define with autogenerated
#          header files
#   TGTS = Variable to define with autogenerated
#          custom targets; if HDRS need to be used in multiple
#          libraries, those libraries should depend on these targets
#          in order to "serialize" the flatc invocations
#  ====================================================================

function(FLATBUFFERS_GENERATE_CPP HDRS TGTS)
  if(NOT ARGN)
    message(SEND_ERROR "Error: FLATBUFFERS_GENERATE_CPP() called without any proto files")
    return()
  endif(NOT ARGN)

  set(options)
  set(one_value_args SOURCE_ROOT BINARY_ROOT)
  set(multi_value_args EXTRA_FBS_PATHS FBS_FILES)
  cmake_parse_arguments(ARG "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})
  if(ARG_UNPARSED_ARGUMENTS)
    message(SEND_ERROR "Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}")
  endif()

  set(${HDRS})
  set(${TGTS})

  set(EXTRA_FBS_PATH_ARGS)
  foreach(PP ${ARG_EXTRA_FBS_PATHS})
    set(EXTRA_FBS_PATH_ARGS ${EXTRA_FBS_PATH_ARGS} -I ${PP})
  endforeach()

  if("${ARG_SOURCE_ROOT}" STREQUAL "")
    SET(ARG_SOURCE_ROOT "${CMAKE_CURRENT_SOURCE_DIR}")
  endif()
  GET_FILENAME_COMPONENT(ARG_SOURCE_ROOT ${ARG_SOURCE_ROOT} ABSOLUTE)

  if("${ARG_BINARY_ROOT}" STREQUAL "")
    SET(ARG_BINARY_ROOT "${CMAKE_CURRENT_BINARY_DIR}")
  endif()
  GET_FILENAME_COMPONENT(ARG_BINARY_ROOT ${ARG_BINARY_ROOT} ABSOLUTE)

  foreach(FIL ${ARG_FBS_FILES})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)

    # Ensure that the flatbuffers file is within the source root.
    # This is a requirement of flatc.
    FILE(RELATIVE_PATH FBS_REL_TO_ROOT "${ARG_SOURCE_ROOT}" "${ABS_FIL}")

    GET_FILENAME_COMPONENT(REL_DIR "${FBS_REL_TO_ROOT}" PATH)

    if(NOT REL_DIR STREQUAL "")
      SET(REL_DIR "${REL_DIR}/")
    endif()

    set(FBS_H_OUT "${ARG_BINARY_ROOT}/${REL_DIR}${FIL_WE}_generated.h")
    list(APPEND ${HDRS} "${FBS_H_OUT}")

    add_custom_command(
      OUTPUT "${FBS_H_OUT}"
      COMMAND  ${FLATBUFFERS_FLATC_EXECUTABLE}
      ARGS
        --cpp -o ${ARG_BINARY_ROOT}/${REL_DIR}
        -I ${ARG_SOURCE_ROOT}
        ${EXTRA_FBS_PATH_ARGS} ${ABS_FIL}
      DEPENDS ${ABS_FIL}
      COMMENT "Running C++ flatcol buffer compiler on ${FIL}"
      VERBATIM )

    # This custom target enforces that there's just one invocation of flatc
    # when there are multiple consumers of the generated files. The target name
    # must be unique; adding parts of the filename helps ensure this.
    set(TGT_NAME ${REL_DIR}${FIL})
    string(REPLACE "/" "-" TGT_NAME ${TGT_NAME})
    add_custom_target(${TGT_NAME}
      DEPENDS "${FBS_H_OUT}")
    list(APPEND ${TGTS} "${TGT_NAME}")
  endforeach()

  set_source_files_properties(${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
  set(${TGTS} ${${TGTS}} PARENT_SCOPE)
endfunction()


find_path(FLATBUFFERS_INCLUDE_DIR flatbuffers/flatbuffers.h
  NO_CMAKE_SYSTEM_PATH
  NO_SYSTEM_ENVIRONMENT_PATH)

find_library(FLATBUFFERS_SHARED_LIBRARY flatbuffers
             DOC "The Google Flat Buffers Library"
             NO_CMAKE_SYSTEM_PATH
             NO_SYSTEM_ENVIRONMENT_PATH)

find_library(FLATBUFFERS_STATIC_LIBRARY libflatbuffers.a
             DOC "Static version of the Google Flat Buffers Library"
             NO_CMAKE_SYSTEM_PATH
             NO_SYSTEM_ENVIRONMENT_PATH)

find_program(FLATBUFFERS_FLATC_EXECUTABLE flatc
             DOC "The Google Flat Buffers Compiler"
             NO_CMAKE_SYSTEM_PATH
             NO_SYSTEM_ENVIRONMENT_PATH)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(FLATBUFFERS REQUIRED_VARS
  FLATBUFFERS_SHARED_LIBRARY FLATBUFFERS_STATIC_LIBRARY
  FLATBUFFERS_INCLUDE_DIR FLATBUFFERS_FLATC_EXECUTABLE)
