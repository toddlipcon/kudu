cmake_minimum_required(VERSION 2.8)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake_modules")

############################################################
# Compiler flags
############################################################

# compiler flags that are common across debug/release builds
#  - msse4.2: Enable sse4.2 compiler intrinsics.
#  - Wall: Enable all warnings.
#  - Wno-sign-compare: suppress warnings for comparison between signed and unsigned
#    integers
#  -Wno-deprecated: some of the gutil code includes old things like ext/hash_set, ignore that
#  - pthread: enable multithreaded malloc
#  - -D__STDC_FORMAT_MACROS: for PRI* print format macros
SET(CXX_COMMON_FLAGS "-msse4.2 -Wall -Wno-sign-compare -Wno-deprecated -pthread -D__STDC_FORMAT_MACROS")
# compiler flags for different build types (run 'cmake -DCMAKE_BUILD_TYPE=<type> .')
# For all builds:
# For CMAKE_BUILD_TYPE=Debug
#   -ggdb: Enable gdb debugging
# For CMAKE_BUILD_TYPE=FastDebug
#   Same as DEBUG, except with some optimizations on.
# For CMAKE_BUILD_TYPE=Release
#   -O3: Enable all compiler optimizations
#   -g: Enable symbols for profiler tools (TODO: remove for shipping)
#   -DNDEBUG: Turn off dchecks/asserts/debug only code.
#   -Wno-strict-aliasing: Suppress warnings for potential issues with pointer aliasing.  Code
#       generated by -O3 causes these warnings.
# For profile guided optimization (PGO) builds, in addition to the flags for release builds:
#   1. Build first with CMAKE_BUILD_TYPE_PROFILE_GEN:
#     -fprofile-generate: Indicates compiler should insert profile guided optimization events
#   2. Run the benchmarks (generates *.gcda profiling data).
#   3. Build again with CMAKE_BUILD_TYPE_PROFILE_BUILD
#     -fprofile-use: Compiler will use the profile outputs for optimizations
SET(CXX_FLAGS_DEBUG "-ggdb")
SET(CXX_FLAGS_FASTDEBUG "-ggdb -O1 -fno-omit-frame-pointer")
SET(CXX_FLAGS_RELEASE "-O3 -g -DNDEBUG -Wno-strict-aliasing")

if (NOT "${KUDU_USE_LTO}" STREQUAL "")
  SET(CXX_FLAGS_RELEASE "${CXX_FLAGS_RELEASE} flto -fno-use-linker-plugin")
endif()

SET(CXX_FLAGS_PROFILE_GEN "${CXX_FLAGS_RELEASE} -fprofile-generate")
SET(CXX_FLAGS_PROFILE_BUILD "${CXX_FLAGS_RELEASE} -fprofile-use")

# if no build build type is specified, default to debug builds
if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif(NOT CMAKE_BUILD_TYPE)

STRING (TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)

# Set compile flags based on the build type.
message("Configured for ${CMAKE_BUILD_TYPE} build (set with cmake -DCMAKE_BUILD_TYPE={release,debug,...})")
if ("${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG")
  SET(CMAKE_CXX_FLAGS ${CXX_FLAGS_DEBUG})
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "FASTDEBUG")
  SET(CMAKE_CXX_FLAGS ${CXX_FLAGS_FASTDEBUG})
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "RELEASE")
  SET(CMAKE_CXX_FLAGS ${CXX_FLAGS_RELEASE})
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "PROFILE_GEN")
  SET(CMAKE_CXX_FLAGS ${CXX_FLAGS_PROFILE_GEN})
elseif ("${CMAKE_BUILD_TYPE}" STREQUAL "PROFILE_BUILD")
  SET(CMAKE_CXX_FLAGS ${CXX_FLAGS_PROFILE_BUILD})
else()
  message(FATAL_ERROR "Unknown build type: ${CMAKE_BUILD_TYPE}")
endif ()

# Add common flags
SET(CMAKE_CXX_FLAGS "${CXX_COMMON_FLAGS} ${CMAKE_CXX_FLAGS}")

if("${CMAKE_CXX_COMPILER}" MATCHES ".*clang.*")
  set(IS_CLANG 1)
else()
  set(IS_CLANG 0)
endif()

# Flag to enable clang address sanitizer
# This will only build if clang is the chosen compiler
if (${KUDU_USE_ASAN})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -DADDRESS_SANITIZER")

  # Ensure static linking is on -- otherwise can run into llvm bug #56393:
  # http://www.mail-archive.com/gcc-bugs@gcc.gnu.org/msg386467.html
  set(KUDU_STATIC_LINK ON)
endif ()

# Flag to enable clang undefined behavior sanitizer
# We explicitly don't enable all of the sanitizer flags:
# - disable 'vptr' because it currently crashes somewhere in boost::intrusive::list code
# - disable 'alignment' because unaligned access is really OK on Nehalem and we do it
#   all over the place.
if (${KUDU_USE_UBSAN})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-sanitize=alignment,vptr -fno-sanitize-recover")
endif ()

if ("${KUDU_USE_UBSAN}" OR "${KUDU_USE_ASAN}")
  if (NOT "${IS_CLANG}")
    message(SEND_ERROR "Cannot use ASAN/UBSAN without clang")
  endif()
  # Don't omit frame pointers, so that our failures have better info included.
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer -fsanitize-blacklist=${CMAKE_CURRENT_SOURCE_DIR}/build-support/sanitize-blacklist.txt")

  # Ensure static linking is on -- otherwise can run into llvm bug #56393:
  # http://www.mail-archive.com/gcc-bugs@gcc.gnu.org/msg386467.html
  set(KUDU_STATIC_LINK ON)
endif()

# Code coverage
if ("${KUDU_GENERATE_COVERAGE}")
  if("${CMAKE_CXX_COMPILER}" MATCHES ".*clang.*")
    # There appears to be some bugs in clang 3.3 which cause code coverage
    # to have link errors, not locating the llvm_gcda_* symbols.
    # This should be fixed in llvm 3.4 with http://llvm.org/viewvc/llvm-project?view=revision&revision=184666
    message(SEND_ERROR "Cannot currently generate coverage with clang")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage")
endif()

# set compile output directory
STRING (TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWERCASE)
set(BUILD_OUTPUT_ROOT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build/${CMAKE_BUILD_TYPE_LOWERCASE}/")

# Link build/latest to the current build directory, to avoid developers
# accidentally running the latest debug build when in fact they're building
# release builds.
FILE(MAKE_DIRECTORY ${BUILD_OUTPUT_ROOT_DIRECTORY})
EXECUTE_PROCESS(COMMAND ln -T -sf ${BUILD_OUTPUT_ROOT_DIRECTORY}
  ${CMAKE_CURRENT_SOURCE_DIR}/build/latest)

# where to put generated libraries
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${BUILD_OUTPUT_ROOT_DIRECTORY}")
set(ARCHIVE_OUTPUT_DIRECTORY "${BUILD_OUTPUT_ROOT_DIRECTORY}")

# where to put generated binaries
set(EXECUTABLE_OUTPUT_PATH "${BUILD_OUTPUT_ROOT_DIRECTORY}")


INCLUDE_DIRECTORIES(src)

############################################################
# Testing
############################################################

# Set a 15-minute timeout for tests run via 'make test'.
# This keeps our jenkins builds from hanging in the case that there's
# a deadlock or anything.
SET(KUDU_TEST_TIMEOUT 900)

# Add a new test case. Additional arguments after the
# name of the test will be passed to SET_TESTS_PROPERTIES
FUNCTION(ADD_KUDU_TEST REL_TEST_BINARY)
  SET(TEST_PATH "${EXECUTABLE_OUTPUT_PATH}/${REL_TEST_BINARY}")
  GET_FILENAME_COMPONENT(SRC_DIR ${TEST_PATH} PATH)
  GET_FILENAME_COMPONENT(TEST_BINARY ${TEST_PATH} NAME)
  ADD_EXECUTABLE(${TEST_BINARY} "${REL_TEST_BINARY}.cc")
  ADD_TEST(${TEST_BINARY} ${CMAKE_SOURCE_DIR}/build-support/run-test.sh
    "${BUILD_OUTPUT_ROOT_DIRECTORY}/${TEST_BINARY}")
  SET_TESTS_PROPERTIES(${TEST_BINARY} PROPERTIES
    TIMEOUT ${KUDU_TEST_TIMEOUT}
    ${ARGN})
  TARGET_LINK_LIBRARIES(${TEST_BINARY} ${KUDU_TEST_LINK_LIBS})
ENDFUNCTION()

ENABLE_TESTING()

############################################################
# Dependencies
############################################################
set(THIRDPARTY_PREFIX ${CMAKE_SOURCE_DIR}/thirdparty/installed)

# Look in thirdparty/installed before anywhere else for system dependencies.
set(CMAKE_PREFIX_PATH ${THIRDPARTY_PREFIX})

set(LIBS ${LIBS} -lrt)
set(TEST_ONLY_LIBS)

## Boost
### Workaround for http://stackoverflow.com/questions/9948375/cmake-find-package-succeeds-but-returns-wrong-path
set(Boost_NO_BOOST_CMAKE ON)

if ("${KUDU_STATIC_LINK}")
  set(Boost_USE_STATIC_LIBS ON)
endif()

find_package(Boost COMPONENTS thread system REQUIRED)
include_directories(SYSTEM ${Boost_INCLUDE_DIR} )
set(LIBS ${LIBS} ${Boost_LIBRARIES})

## Cyrus SASL
find_package(CyrusSASL REQUIRED)
include_directories(SYSTEM ${CYRUS_SASL_INCLUDE_DIR})

## GLog
find_package(GLog REQUIRED)
include_directories(SYSTEM ${GLOG_INCLUDE_DIR})
if ("${KUDU_STATIC_LINK}")
  add_library(glog STATIC IMPORTED)
  set_target_properties(glog PROPERTIES IMPORTED_LOCATION "${GLOG_STATIC_LIB}")
else()
  add_library(glog SHARED IMPORTED)
  set_target_properties(glog PROPERTIES IMPORTED_LOCATION "${GLOG_LIBS}/libglog.so")
endif()
SET(LIBS ${LIBS} glog)

## GFlags
find_package(GFlags REQUIRED)
INCLUDE_DIRECTORIES(SYSTEM ${GFLAGS_INCLUDE_DIR})
if ("${KUDU_STATIC_LINK}")
  add_library(gflags STATIC IMPORTED)
  set_target_properties(gflags PROPERTIES IMPORTED_LOCATION "${GFLAGS_STATIC_LIB}")
else()
  add_library(gflags SHARED IMPORTED)
  set_target_properties(gflags PROPERTIES IMPORTED_LOCATION "${GFLAGS_LIBS}/libgflags.so")
endif()
SET(LIBS ${LIBS} gflags)

## GTest
find_package(GTest REQUIRED)
include_directories(SYSTEM ${GTEST_INCLUDE_DIR})
add_library(gtest STATIC IMPORTED)
set_target_properties(gtest PROPERTIES IMPORTED_LOCATION "${GTEST_LIBRARY}")
set(LIBS ${LIBS} ${GTEST_LIBRARY})
SET(KUDU_MIN_TEST_LIBS ${GTEST_LIBRARY} kudu_test_main glog gflags  )

## Protobuf
SET(PROTO_SRC_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/src)
SET(PROTO_DST_ROOT ${CMAKE_CURRENT_BINARY_DIR}/src)
find_package( Protobuf REQUIRED )
include_directories(SYSTEM ${PROTOBUF_INCLUDE_DIR})
if ("${KUDU_STATIC_LINK}")
  add_library(protobuf STATIC IMPORTED)
  set_target_properties(protobuf PROPERTIES IMPORTED_LOCATION "${PROTOBUF_STATIC_LIBRARY}")
else()
  add_library(protobuf SHARED IMPORTED)
  set_target_properties(protobuf PROPERTIES IMPORTED_LOCATION "${PROTOBUF_LIBRARY}")
endif()
set(LIBS ${LIBS} protobuf)
find_package(KRPC REQUIRED)

## Snappy
find_package(Snappy REQUIRED)
include_directories(SYSTEM ${SNAPPY_INCLUDE_DIR})
if (${KUDU_STATIC_LINK})
  set(LIBS ${LIBS} ${SNAPPY_STATIC_LIB})
else()
  set(LIBS ${LIBS} ${SNAPPY_LIBS}/libsnappy.so)
endif()

## Libev
find_package(LibEv REQUIRED)
include_directories(SYSTEM ${LIBEV_INCLUDE_DIR})

## LZ4
find_package(Lz4 REQUIRED)
include_directories(SYSTEM ${LZ4_INCLUDE_DIR})
set(LIBS ${LIBS} ${LZ4_STATIC_LIB})

## ZLib
find_package(Zlib REQUIRED)
include_directories(SYSTEM ${ZLIB_INCLUDE_DIR})
if (${KUDU_STATIC_LINK})
  set(LIBS ${LIBS} ${ZLIB_STATIC_LIB})
else()
  set(LIBS ${LIBS} ${ZLIB_LIBS}/libz.so)
endif()

## Squeasel
find_package(Squeasel REQUIRED)
include_directories(SYSTEM ${SQUEASEL_INCLUDE_DIR})
set(LIBS ${LIBS} ${SQUEASEL_STATIC_LIB})

## libunwind
set(LIBS ${LIBS} /home/todd/git/kudu/thirdparty/installed/lib/libunwind.a)
set(LIBS ${LIBS} /home/todd/git/kudu/thirdparty/installed/lib/libunwind-ptrace.a)
set(LIBS ${LIBS} /home/todd/git/kudu/thirdparty/installed/lib/libunwind-generic.a)
set(LIBS ${LIBS} /home/todd/git/kudu/thirdparty/installed/lib/libunwind-x86_64.a)

## Google PerfTools
find_package( GPerf REQUIRED )
if (NOT "${KUDU_USE_ASAN}")
  set(LIBS ${LIBS} ${TCMALLOC_LIBRARY} ${PROFILER_LIBRARY})
endif()

## curl
FIND_PACKAGE(CURL REQUIRED)
set(TEST_ONLY_LIBS ${TEST_ONLY_LIBS} ${CURL_LIBRARIES})


############################################################
# Linker setup
############################################################
SET(KUDU_DEP_LIBS ${LIBS})
SET(KUDU_LINK_LIBS client master master_proto tserver tserver_proto tablet server krpc cfile kudu_common kudu_util gutil ${LIBS})
SET(KUDU_TEST_LINK_LIBS integration-tests ${KUDU_LINK_LIBS} ${TEST_ONLY_LIBS} ${KUDU_MIN_TEST_LIBS})

############################################################
# "make ctags" target
############################################################
IF (UNIX)
  ADD_CUSTOM_TARGET(ctags ctags -R --languages=c++,c --exclude=thirdparty/installed)
ENDIF (UNIX)

############################################################
# "make etags" target
############################################################
IF (UNIX)
  ADD_CUSTOM_TARGET(tags etags --members --declarations
  `find ${CMAKE_CURRENT_SOURCE_DIR}/src -name
*.cc -or -name *.hh -or -name *.cpp -or -name *.h -or -name *.c -or
-name *.f`)
  ADD_CUSTOM_TARGET(etags DEPENDS tags)
ENDIF (UNIX)

############################################################
# "make cscope" target
############################################################
IF (UNIX)
  ADD_CUSTOM_TARGET(cscope find ${CMAKE_CURRENT_SOURCE_DIR}/src
-name *.cc -or -name *.hh -or -name *.cpp -or -name *.h -or
-name *.c -or -name *.f > cscope.files && cscope -q -b)
ENDIF (UNIX)

############################################################
# "make lint" target
############################################################
IF (UNIX)
  # Full lint
  ADD_CUSTOM_TARGET(lint ${CMAKE_CURRENT_SOURCE_DIR}/build-support/lint.sh)
  # Incremental lint - only checks files changed since the last
  # merged upstream commit
  ADD_CUSTOM_TARGET(ilint ${CMAKE_CURRENT_SOURCE_DIR}/build-support/lint.sh -c)
ENDIF (UNIX)

############################################################
# Subdirectories
############################################################

# Google util libraries borrowed from supersonic
add_subdirectory(src/gutil)
set(LIBS ${LIBS} ${GUTIL_LIBS})

add_subdirectory(src/util)
set(LIBS ${LIBS} ${KUDU_UTIL_LIBS})

add_subdirectory(src/common)
set(LIBS ${LIBS} ${KUDU_COMMON_LIBS})

add_subdirectory(src/cfile)
set(LIBS ${LIBS} ${CFILE_LIBS})

add_subdirectory(src/server)
set(LIBS ${LIBS} ${SERVER_LIBS})

add_subdirectory(src/tablet)
set(LIBS ${LIBS} ${TABLET_LIBS})

add_subdirectory(src/rpc)
set(LIBS ${LIBS} ${RPC_LIBS})

add_subdirectory(src/tserver)
set(LIBS ${LIBS} ${TSERVER_LIBS})

add_subdirectory(src/consensus)
set(LIBS ${LIBS} ${CONSENSUS_LIBS})

add_subdirectory(src/master)
set(LIBS ${LIBS} ${MASTER_LIBS})

add_subdirectory(src/client)
set(LIBS ${LIBS} ${CLIENT_LIBS})

add_subdirectory(src/integration-tests)

add_subdirectory(src/experiments)

add_subdirectory(src/benchmarks)

add_subdirectory(src/twitter-demo)
